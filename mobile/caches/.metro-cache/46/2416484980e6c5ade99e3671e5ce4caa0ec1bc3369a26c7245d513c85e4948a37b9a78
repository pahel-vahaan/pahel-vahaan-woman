{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getBoundByRegion = void 0;\n  /**\n   * Code taken from https://github.com/react-native-maps/react-native-maps/issues/356\n   * Solution by https://github.com/MatsMaker\n   */\n\n  const getBoundByRegion = function (region) {\n    let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    /*\n     * Latitude : max/min +90 to -90\n     * Longitude : max/min +180 to -180\n     */\n    // Of course we can do it mo compact but it wait is more obvious\n    const calcMinLatByOffset = (lng, offset) => {\n      const factValue = lng - offset;\n      if (factValue < -90) {\n        return (90 + offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMaxLatByOffset = (lng, offset) => {\n      const factValue = lng + offset;\n      if (90 < factValue) {\n        return (90 - offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMinLngByOffset = (lng, offset) => {\n      const factValue = lng - offset;\n      if (factValue < -180) {\n        return (180 + offset) * -1;\n      }\n      return factValue;\n    };\n    const calcMaxLngByOffset = (lng, offset) => {\n      const factValue = lng + offset;\n      if (180 < factValue) {\n        return (180 - offset) * -1;\n      }\n      return factValue;\n    };\n    const latOffset = region.latitudeDelta / 2 * scale;\n    const lngD = region.longitudeDelta < -180 ? 360 + region.longitudeDelta : region.longitudeDelta;\n    const lngOffset = lngD / 2 * scale;\n\n    // bounds.nw.lng,\n    //           bounds.se.lat,\n    //           bounds.se.lng,\n    //           bounds.nw.lat\n\n    return [calcMinLngByOffset(region.longitude, lngOffset),\n    // westLng - min lng\n    calcMinLatByOffset(region.latitude, latOffset),\n    // southLat - min lat\n    calcMaxLngByOffset(region.longitude, lngOffset),\n    // eastLng - max lng\n    calcMaxLatByOffset(region.latitude, latOffset) // northLat - max lat\n    ];\n  };\n  exports.getBoundByRegion = getBoundByRegion;\n});","lineCount":65,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[11,2,6,7],[11,8,6,13,"getBoundByRegion"],[11,24,6,29],[11,27,6,32],[11,36,6,32,"getBoundByRegion"],[11,37,6,42,"region"],[11,43,6,48],[11,45,6,50],[12,4,7,2],[12,8,7,6,"scale"],[12,13,7,11],[12,16,7,14,"arguments"],[12,25,7,23],[12,26,7,24,"length"],[12,32,7,30],[12,35,7,33],[12,36,7,34],[12,40,7,38,"arguments"],[12,49,7,47],[12,50,7,48],[12,51,7,49],[12,52,7,50],[12,57,7,55,"undefined"],[12,66,7,64],[12,69,7,67,"arguments"],[12,78,7,76],[12,79,7,77],[12,80,7,78],[12,81,7,79],[12,84,7,82],[12,85,7,83],[13,4,8,2],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,4,12,2],[18,4,13,2],[18,10,13,8,"calcMinLatByOffset"],[18,28,13,26],[18,31,13,29,"calcMinLatByOffset"],[18,32,13,30,"lng"],[18,35,13,33],[18,37,13,35,"offset"],[18,43,13,41],[18,48,13,46],[19,6,14,4],[19,12,14,10,"factValue"],[19,21,14,19],[19,24,14,22,"lng"],[19,27,14,25],[19,30,14,28,"offset"],[19,36,14,34],[20,6,15,4],[20,10,15,8,"factValue"],[20,19,15,17],[20,22,15,20],[20,23,15,21],[20,25,15,23],[20,27,15,25],[21,8,16,6],[21,15,16,13],[21,16,16,14],[21,18,16,16],[21,21,16,19,"offset"],[21,27,16,25],[21,31,16,29],[21,32,16,30],[21,33,16,31],[22,6,17,4],[23,6,18,4],[23,13,18,11,"factValue"],[23,22,18,20],[24,4,19,2],[24,5,19,3],[25,4,20,2],[25,10,20,8,"calcMaxLatByOffset"],[25,28,20,26],[25,31,20,29,"calcMaxLatByOffset"],[25,32,20,30,"lng"],[25,35,20,33],[25,37,20,35,"offset"],[25,43,20,41],[25,48,20,46],[26,6,21,4],[26,12,21,10,"factValue"],[26,21,21,19],[26,24,21,22,"lng"],[26,27,21,25],[26,30,21,28,"offset"],[26,36,21,34],[27,6,22,4],[27,10,22,8],[27,12,22,10],[27,15,22,13,"factValue"],[27,24,22,22],[27,26,22,24],[28,8,23,6],[28,15,23,13],[28,16,23,14],[28,18,23,16],[28,21,23,19,"offset"],[28,27,23,25],[28,31,23,29],[28,32,23,30],[28,33,23,31],[29,6,24,4],[30,6,25,4],[30,13,25,11,"factValue"],[30,22,25,20],[31,4,26,2],[31,5,26,3],[32,4,27,2],[32,10,27,8,"calcMinLngByOffset"],[32,28,27,26],[32,31,27,29,"calcMinLngByOffset"],[32,32,27,30,"lng"],[32,35,27,33],[32,37,27,35,"offset"],[32,43,27,41],[32,48,27,46],[33,6,28,4],[33,12,28,10,"factValue"],[33,21,28,19],[33,24,28,22,"lng"],[33,27,28,25],[33,30,28,28,"offset"],[33,36,28,34],[34,6,29,4],[34,10,29,8,"factValue"],[34,19,29,17],[34,22,29,20],[34,23,29,21],[34,26,29,24],[34,28,29,26],[35,8,30,6],[35,15,30,13],[35,16,30,14],[35,19,30,17],[35,22,30,20,"offset"],[35,28,30,26],[35,32,30,30],[35,33,30,31],[35,34,30,32],[36,6,31,4],[37,6,32,4],[37,13,32,11,"factValue"],[37,22,32,20],[38,4,33,2],[38,5,33,3],[39,4,34,2],[39,10,34,8,"calcMaxLngByOffset"],[39,28,34,26],[39,31,34,29,"calcMaxLngByOffset"],[39,32,34,30,"lng"],[39,35,34,33],[39,37,34,35,"offset"],[39,43,34,41],[39,48,34,46],[40,6,35,4],[40,12,35,10,"factValue"],[40,21,35,19],[40,24,35,22,"lng"],[40,27,35,25],[40,30,35,28,"offset"],[40,36,35,34],[41,6,36,4],[41,10,36,8],[41,13,36,11],[41,16,36,14,"factValue"],[41,25,36,23],[41,27,36,25],[42,8,37,6],[42,15,37,13],[42,16,37,14],[42,19,37,17],[42,22,37,20,"offset"],[42,28,37,26],[42,32,37,30],[42,33,37,31],[42,34,37,32],[43,6,38,4],[44,6,39,4],[44,13,39,11,"factValue"],[44,22,39,20],[45,4,40,2],[45,5,40,3],[46,4,41,2],[46,10,41,8,"latOffset"],[46,19,41,17],[46,22,41,20,"region"],[46,28,41,26],[46,29,41,27,"latitudeDelta"],[46,42,41,40],[46,45,41,43],[46,46,41,44],[46,49,41,47,"scale"],[46,54,41,52],[47,4,42,2],[47,10,42,8,"lngD"],[47,14,42,12],[47,17,42,15,"region"],[47,23,42,21],[47,24,42,22,"longitudeDelta"],[47,38,42,36],[47,41,42,39],[47,42,42,40],[47,45,42,43],[47,48,42,46],[47,51,42,49],[47,54,42,52,"region"],[47,60,42,58],[47,61,42,59,"longitudeDelta"],[47,75,42,73],[47,78,42,76,"region"],[47,84,42,82],[47,85,42,83,"longitudeDelta"],[47,99,42,97],[48,4,43,2],[48,10,43,8,"lngOffset"],[48,19,43,17],[48,22,43,20,"lngD"],[48,26,43,24],[48,29,43,27],[48,30,43,28],[48,33,43,31,"scale"],[48,38,43,36],[50,4,45,2],[51,4,46,2],[52,4,47,2],[53,4,48,2],[55,4,50,2],[55,11,50,9],[55,12,50,10,"calcMinLngByOffset"],[55,30,50,28],[55,31,50,29,"region"],[55,37,50,35],[55,38,50,36,"longitude"],[55,47,50,45],[55,49,50,47,"lngOffset"],[55,58,50,56],[55,59,50,57],[56,4,51,2],[57,4,52,2,"calcMinLatByOffset"],[57,22,52,20],[57,23,52,21,"region"],[57,29,52,27],[57,30,52,28,"latitude"],[57,38,52,36],[57,40,52,38,"latOffset"],[57,49,52,47],[57,50,52,48],[58,4,53,2],[59,4,54,2,"calcMaxLngByOffset"],[59,22,54,20],[59,23,54,21,"region"],[59,29,54,27],[59,30,54,28,"longitude"],[59,39,54,37],[59,41,54,39,"lngOffset"],[59,50,54,48],[59,51,54,49],[60,4,55,2],[61,4,56,2,"calcMaxLatByOffset"],[61,22,56,20],[61,23,56,21,"region"],[61,29,56,27],[61,30,56,28,"latitude"],[61,38,56,36],[61,40,56,38,"latOffset"],[61,49,56,47],[61,50,56,48],[61,51,56,49],[62,4,56,49],[62,5,57,3],[63,2,58,0],[63,3,58,1],[64,2,58,2,"exports"],[64,9,58,2],[64,10,58,2,"getBoundByRegion"],[64,26,58,2],[64,29,58,2,"getBoundByRegion"],[64,45,58,2],[65,0,58,2],[65,3]],"functionMap":{"names":["<global>","getBoundByRegion","calcMinLatByOffset","calcMaxLatByOffset","calcMinLngByOffset","calcMaxLngByOffset"],"mappings":"AAA;gCCK;6BCO;GDM;6BEC;GFM;6BGC;GHM;6BIC;GJM;CDkB"}},"type":"js/module"}]}