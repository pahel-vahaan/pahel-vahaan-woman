{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.firebase = exports.default = void 0;\n  var _env2 = require(_dependencyMap[0], \"expo/virtual/env\");\n  /**\n   * Firebase Configuration for SafeRide App\n   * Configure Firebase services for authentication, database, and analytics\n   */\n\n  /**\n   * Firebase configuration object\n   * In a real app, these would be environment variables\n   */\n  const firebaseConfig = {\n    apiKey: _env2.env.EXPO_PUBLIC_FIREBASE_API_KEY || \"your-api-key\",\n    authDomain: _env2.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN || \"saferide-app.firebaseapp.com\",\n    projectId: _env2.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID || \"saferide-app\",\n    storageBucket: _env2.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET || \"saferide-app.appspot.com\",\n    messagingSenderId: _env2.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID || \"123456789012\",\n    appId: _env2.env.EXPO_PUBLIC_FIREBASE_APP_ID || \"1:123456789012:ios:abc123def456\",\n    measurementId: _env2.env.EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID || \"G-XXXXXXXXXX\",\n    databaseURL: _env2.env.EXPO_PUBLIC_FIREBASE_DATABASE_URL || \"https://saferide-app-default-rtdb.firebaseio.com/\"\n  };\n\n  /**\n   * Initialize Firebase (mock implementation)\n   * In a real app, you would use Firebase SDK\n   */\n  class FirebaseService {\n    constructor() {\n      this.initialized = false;\n      this.currentUser = null;\n      this.listeners = new Map();\n    }\n\n    /**\n     * Initialize Firebase services\n     */\n    async initialize() {\n      try {\n        // Mock Firebase initialization\n        console.log('Firebase initialized with config:', firebaseConfig.projectId);\n        this.initialized = true;\n        return true;\n      } catch (error) {\n        console.error('Firebase initialization failed:', error);\n        throw error;\n      }\n    }\n\n    /**\n     * Authentication methods\n     */\n    auth = {\n      /**\n       * Send OTP to phone number\n       * @param {string} phoneNumber - Phone number with country code\n       * @returns {Promise<string>} Verification ID\n       */\n      sendOTP: async phoneNumber => {\n        try {\n          // Mock OTP sending - in real app use Firebase Phone Auth\n          console.log(`Sending OTP to ${phoneNumber}`);\n\n          // Simulate network delay\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          // Return mock verification ID\n          return `mock-verification-id-${Date.now()}`;\n        } catch (error) {\n          console.error('Failed to send OTP:', error);\n          throw new Error('Failed to send OTP. Please try again.');\n        }\n      },\n      /**\n       * Verify OTP and sign in user\n       * @param {string} verificationId - Verification ID from sendOTP\n       * @param {string} otp - OTP code entered by user\n       * @returns {Promise<Object>} User object\n       */\n      verifyOTP: async (verificationId, otp) => {\n        try {\n          console.log(`Verifying OTP ${otp} for verification ID ${verificationId}`);\n\n          // Mock OTP verification - in real app use Firebase Phone Auth\n          await new Promise(resolve => setTimeout(resolve, 1500));\n\n          // For demo, accept any 6-digit OTP\n          if (otp.length !== 6) {\n            throw new Error('Invalid OTP format');\n          }\n\n          // Create mock user\n          const user = {\n            uid: `user-${Date.now()}`,\n            phoneNumber: '+919876543210',\n            // Mock phone number\n            displayName: '',\n            email: null,\n            isVerified: true,\n            emergencyContacts: [],\n            savedAddresses: [],\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n          this.currentUser = user;\n          return user;\n        } catch (error) {\n          console.error('OTP verification failed:', error);\n          throw error;\n        }\n      },\n      /**\n       * Sign out current user\n       * @returns {Promise<void>}\n       */\n      signOut: async () => {\n        try {\n          console.log('Signing out user');\n          this.currentUser = null;\n\n          // Notify listeners\n          this.listeners.forEach(callback => callback(null));\n        } catch (error) {\n          console.error('Sign out failed:', error);\n          throw error;\n        }\n      },\n      /**\n       * Get current authenticated user\n       * @returns {Object|null} Current user or null\n       */\n      getCurrentUser: () => {\n        return this.currentUser;\n      },\n      /**\n       * Listen for authentication state changes\n       * @param {Function} callback - Callback function\n       * @returns {Function} Unsubscribe function\n       */\n      onAuthStateChanged: callback => {\n        const listenerId = Date.now().toString();\n        this.listeners.set(listenerId, callback);\n\n        // Call immediately with current user\n        callback(this.currentUser);\n\n        // Return unsubscribe function\n        return () => {\n          this.listeners.delete(listenerId);\n        };\n      },\n      /**\n       * Update user profile\n       * @param {Object} updates - Profile updates\n       * @returns {Promise<Object>} Updated user\n       */\n      updateProfile: async updates => {\n        try {\n          if (!this.currentUser) {\n            throw new Error('No authenticated user');\n          }\n\n          // Mock profile update\n          this.currentUser = {\n            ...this.currentUser,\n            ...updates,\n            updatedAt: new Date()\n          };\n\n          // Notify listeners\n          this.listeners.forEach(callback => callback(this.currentUser));\n          return this.currentUser;\n        } catch (error) {\n          console.error('Profile update failed:', error);\n          throw error;\n        }\n      }\n    };\n\n    /**\n     * Firestore database methods\n     */\n    firestore = {\n      /**\n       * Get collection reference (mock)\n       * @param {string} collectionName - Collection name\n       * @returns {Object} Collection reference\n       */\n      collection: collectionName => ({\n        /**\n         * Add document to collection\n         * @param {Object} data - Document data\n         * @returns {Promise<Object>} Document reference\n         */\n        add: async data => {\n          const docId = `${collectionName}-${Date.now()}`;\n          console.log(`Adding document to ${collectionName}:`, data);\n          return {\n            id: docId,\n            ...data,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n        },\n        /**\n         * Get document by ID\n         * @param {string} docId - Document ID\n         * @returns {Promise<Object>} Document data\n         */\n        doc: docId => ({\n          get: async () => {\n            console.log(`Getting document ${docId} from ${collectionName}`);\n            return {\n              id: docId,\n              exists: true,\n              data: () => ({\n                id: docId,\n                createdAt: new Date(),\n                updatedAt: new Date()\n              })\n            };\n          },\n          set: async data => {\n            console.log(`Setting document ${docId} in ${collectionName}:`, data);\n            return {\n              id: docId,\n              ...data,\n              updatedAt: new Date()\n            };\n          },\n          update: async updates => {\n            console.log(`Updating document ${docId} in ${collectionName}:`, updates);\n            return {\n              id: docId,\n              ...updates,\n              updatedAt: new Date()\n            };\n          }\n        }),\n        /**\n         * Query collection\n         * @param {string} field - Field to query\n         * @param {string} operator - Query operator\n         * @param {*} value - Query value\n         * @returns {Promise<Array>} Query results\n         */\n        where: (field, operator, value) => ({\n          get: async () => {\n            console.log(`Querying ${collectionName} where ${field} ${operator} ${value}`);\n            return {\n              docs: [],\n              empty: true,\n              size: 0\n            };\n          }\n        })\n      })\n    };\n\n    /**\n     * Realtime Database methods\n     */\n    database = {\n      /**\n       * Get database reference\n       * @param {string} path - Database path\n       * @returns {Object} Database reference\n       */\n      ref: path => ({\n        /**\n         * Set data at path\n         * @param {*} data - Data to set\n         * @returns {Promise<void>}\n         */\n        set: async data => {\n          console.log(`Setting data at ${path}:`, data);\n          return Promise.resolve();\n        },\n        /**\n         * Update data at path\n         * @param {Object} updates - Updates to apply\n         * @returns {Promise<void>}\n         */\n        update: async updates => {\n          console.log(`Updating data at ${path}:`, updates);\n          return Promise.resolve();\n        },\n        /**\n         * Listen for data changes\n         * @param {Function} callback - Callback function\n         * @returns {Function} Unsubscribe function\n         */\n        on: (eventType, callback) => {\n          console.log(`Listening for ${eventType} at ${path}`);\n\n          // Mock data for demonstration\n          if (path.includes('drivers')) {\n            // Mock driver location updates\n            const interval = setInterval(() => {\n              callback({\n                val: () => ({\n                  latitude: 19.0760 + (Math.random() - 0.5) * 0.01,\n                  longitude: 72.8777 + (Math.random() - 0.5) * 0.01,\n                  timestamp: Date.now()\n                })\n              });\n            }, 3000);\n            return () => clearInterval(interval);\n          }\n\n          // Return unsubscribe function\n          return () => console.log(`Unsubscribed from ${path}`);\n        },\n        /**\n         * Remove listener\n         * @param {string} eventType - Event type\n         * @param {Function} callback - Callback to remove\n         */\n        off: (eventType, callback) => {\n          console.log(`Removing listener for ${eventType} at ${path}`);\n        }\n      })\n    };\n\n    /**\n     * Analytics methods\n     */\n    analytics = {\n      /**\n       * Log custom event\n       * @param {string} eventName - Event name\n       * @param {Object} parameters - Event parameters\n       */\n      logEvent: async (eventName, parameters = {}) => {\n        console.log(`Analytics Event - ${eventName}:`, parameters);\n\n        // In real app, this would log to Firebase Analytics\n        return Promise.resolve();\n      },\n      /**\n       * Set user properties\n       * @param {Object} properties - User properties\n       */\n      setUserProperties: async properties => {\n        console.log('Setting user properties:', properties);\n        return Promise.resolve();\n      },\n      /**\n       * Set current screen\n       * @param {string} screenName - Screen name\n       */\n      setCurrentScreen: async screenName => {\n        console.log(`Current screen: ${screenName}`);\n        return Promise.resolve();\n      }\n    };\n  }\n\n  // Create and export Firebase service instance\n  const firebase = exports.firebase = new FirebaseService();\n\n  // Initialize Firebase\n  firebase.initialize().catch(console.error);\n  var _default = exports.default = firebase;\n});","lineCount":368,"map":[[7,2,1,0],[8,0,2,0],[9,0,3,0],[10,0,4,0],[12,2,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[16,2,10,0],[16,8,10,6,"firebaseConfig"],[16,22,10,20],[16,25,10,23],[17,4,11,2,"apiKey"],[17,10,11,8],[17,12,11,10,"_env2"],[17,17,11,10],[17,18,11,10,"env"],[17,21,11,10],[17,22,11,10,"EXPO_PUBLIC_FIREBASE_API_KEY"],[17,50,11,10],[17,54,11,54],[17,68,11,68],[18,4,12,2,"authDomain"],[18,14,12,12],[18,16,12,14,"_env2"],[18,21,12,14],[18,22,12,14,"env"],[18,25,12,14],[18,26,12,14,"EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN"],[18,58,12,14],[18,62,12,62],[18,92,12,92],[19,4,13,2,"projectId"],[19,13,13,11],[19,15,13,13,"_env2"],[19,20,13,13],[19,21,13,13,"env"],[19,24,13,13],[19,25,13,13,"EXPO_PUBLIC_FIREBASE_PROJECT_ID"],[19,56,13,13],[19,60,13,60],[19,74,13,74],[20,4,14,2,"storageBucket"],[20,17,14,15],[20,19,14,17,"_env2"],[20,24,14,17],[20,25,14,17,"env"],[20,28,14,17],[20,29,14,17,"EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET"],[20,64,14,17],[20,68,14,68],[20,94,14,94],[21,4,15,2,"messagingSenderId"],[21,21,15,19],[21,23,15,21,"_env2"],[21,28,15,21],[21,29,15,21,"env"],[21,32,15,21],[21,33,15,21,"EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID"],[21,73,15,21],[21,77,15,77],[21,91,15,91],[22,4,16,2,"appId"],[22,9,16,7],[22,11,16,9,"_env2"],[22,16,16,9],[22,17,16,9,"env"],[22,20,16,9],[22,21,16,9,"EXPO_PUBLIC_FIREBASE_APP_ID"],[22,48,16,9],[22,52,16,52],[22,85,16,85],[23,4,17,2,"measurementId"],[23,17,17,15],[23,19,17,17,"_env2"],[23,24,17,17],[23,25,17,17,"env"],[23,28,17,17],[23,29,17,17,"EXPO_PUBLIC_FIREBASE_MEASUREMENT_ID"],[23,64,17,17],[23,68,17,68],[23,82,17,82],[24,4,18,2,"databaseURL"],[24,15,18,13],[24,17,18,15,"_env2"],[24,22,18,15],[24,23,18,15,"env"],[24,26,18,15],[24,27,18,15,"EXPO_PUBLIC_FIREBASE_DATABASE_URL"],[24,60,18,15],[24,64,18,64],[25,2,19,0],[25,3,19,1],[27,2,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,2,25,0],[31,8,25,6,"FirebaseService"],[31,23,25,21],[31,24,25,22],[32,4,26,2,"constructor"],[32,15,26,13,"constructor"],[32,16,26,13],[32,18,26,16],[33,6,27,4],[33,10,27,8],[33,11,27,9,"initialized"],[33,22,27,20],[33,25,27,23],[33,30,27,28],[34,6,28,4],[34,10,28,8],[34,11,28,9,"currentUser"],[34,22,28,20],[34,25,28,23],[34,29,28,27],[35,6,29,4],[35,10,29,8],[35,11,29,9,"listeners"],[35,20,29,18],[35,23,29,21],[35,27,29,25,"Map"],[35,30,29,28],[35,31,29,29],[35,32,29,30],[36,4,30,2],[38,4,32,2],[39,0,33,0],[40,0,34,0],[41,4,35,2],[41,10,35,8,"initialize"],[41,20,35,18,"initialize"],[41,21,35,18],[41,23,35,21],[42,6,36,4],[42,10,36,8],[43,8,37,6],[44,8,38,6,"console"],[44,15,38,13],[44,16,38,14,"log"],[44,19,38,17],[44,20,38,18],[44,55,38,53],[44,57,38,55,"firebaseConfig"],[44,71,38,69],[44,72,38,70,"projectId"],[44,81,38,79],[44,82,38,80],[45,8,39,6],[45,12,39,10],[45,13,39,11,"initialized"],[45,24,39,22],[45,27,39,25],[45,31,39,29],[46,8,40,6],[46,15,40,13],[46,19,40,17],[47,6,41,4],[47,7,41,5],[47,8,41,6],[47,15,41,13,"error"],[47,20,41,18],[47,22,41,20],[48,8,42,6,"console"],[48,15,42,13],[48,16,42,14,"error"],[48,21,42,19],[48,22,42,20],[48,55,42,53],[48,57,42,55,"error"],[48,62,42,60],[48,63,42,61],[49,8,43,6],[49,14,43,12,"error"],[49,19,43,17],[50,6,44,4],[51,4,45,2],[53,4,47,2],[54,0,48,0],[55,0,49,0],[56,4,50,2,"auth"],[56,8,50,6],[56,11,50,9],[57,6,51,4],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,6,56,4,"sendOTP"],[62,13,56,11],[62,15,56,13],[62,21,56,20,"phoneNumber"],[62,32,56,31],[62,36,56,36],[63,8,57,6],[63,12,57,10],[64,10,58,8],[65,10,59,8,"console"],[65,17,59,15],[65,18,59,16,"log"],[65,21,59,19],[65,22,59,20],[65,40,59,38,"phoneNumber"],[65,51,59,49],[65,53,59,51],[65,54,59,52],[67,10,61,8],[68,10,62,8],[68,16,62,14],[68,20,62,18,"Promise"],[68,27,62,25],[68,28,62,26,"resolve"],[68,35,62,33],[68,39,62,37,"setTimeout"],[68,49,62,47],[68,50,62,48,"resolve"],[68,57,62,55],[68,59,62,57],[68,63,62,61],[68,64,62,62],[68,65,62,63],[70,10,64,8],[71,10,65,8],[71,17,65,15],[71,41,65,39,"Date"],[71,45,65,43],[71,46,65,44,"now"],[71,49,65,47],[71,50,65,48],[71,51,65,49],[71,53,65,51],[72,8,66,6],[72,9,66,7],[72,10,66,8],[72,17,66,15,"error"],[72,22,66,20],[72,24,66,22],[73,10,67,8,"console"],[73,17,67,15],[73,18,67,16,"error"],[73,23,67,21],[73,24,67,22],[73,45,67,43],[73,47,67,45,"error"],[73,52,67,50],[73,53,67,51],[74,10,68,8],[74,16,68,14],[74,20,68,18,"Error"],[74,25,68,23],[74,26,68,24],[74,65,68,63],[74,66,68,64],[75,8,69,6],[76,6,70,4],[76,7,70,5],[77,6,72,4],[78,0,73,0],[79,0,74,0],[80,0,75,0],[81,0,76,0],[82,0,77,0],[83,6,78,4,"verifyOTP"],[83,15,78,13],[83,17,78,15],[83,23,78,15,"verifyOTP"],[83,24,78,22,"verificationId"],[83,38,78,36],[83,40,78,38,"otp"],[83,43,78,41],[83,48,78,46],[84,8,79,6],[84,12,79,10],[85,10,80,8,"console"],[85,17,80,15],[85,18,80,16,"log"],[85,21,80,19],[85,22,80,20],[85,39,80,37,"otp"],[85,42,80,40],[85,66,80,64,"verificationId"],[85,80,80,78],[85,82,80,80],[85,83,80,81],[87,10,82,8],[88,10,83,8],[88,16,83,14],[88,20,83,18,"Promise"],[88,27,83,25],[88,28,83,26,"resolve"],[88,35,83,33],[88,39,83,37,"setTimeout"],[88,49,83,47],[88,50,83,48,"resolve"],[88,57,83,55],[88,59,83,57],[88,63,83,61],[88,64,83,62],[88,65,83,63],[90,10,85,8],[91,10,86,8],[91,14,86,12,"otp"],[91,17,86,15],[91,18,86,16,"length"],[91,24,86,22],[91,29,86,27],[91,30,86,28],[91,32,86,30],[92,12,87,10],[92,18,87,16],[92,22,87,20,"Error"],[92,27,87,25],[92,28,87,26],[92,48,87,46],[92,49,87,47],[93,10,88,8],[95,10,90,8],[96,10,91,8],[96,16,91,14,"user"],[96,20,91,18],[96,23,91,21],[97,12,92,10,"uid"],[97,15,92,13],[97,17,92,15],[97,25,92,23,"Date"],[97,29,92,27],[97,30,92,28,"now"],[97,33,92,31],[97,34,92,32],[97,35,92,33],[97,37,92,35],[98,12,93,10,"phoneNumber"],[98,23,93,21],[98,25,93,23],[98,40,93,38],[99,12,93,40],[100,12,94,10,"displayName"],[100,23,94,21],[100,25,94,23],[100,27,94,25],[101,12,95,10,"email"],[101,17,95,15],[101,19,95,17],[101,23,95,21],[102,12,96,10,"isVerified"],[102,22,96,20],[102,24,96,22],[102,28,96,26],[103,12,97,10,"emergencyContacts"],[103,29,97,27],[103,31,97,29],[103,33,97,31],[104,12,98,10,"savedAddresses"],[104,26,98,24],[104,28,98,26],[104,30,98,28],[105,12,99,10,"createdAt"],[105,21,99,19],[105,23,99,21],[105,27,99,25,"Date"],[105,31,99,29],[105,32,99,30],[105,33,99,31],[106,12,100,10,"updatedAt"],[106,21,100,19],[106,23,100,21],[106,27,100,25,"Date"],[106,31,100,29],[106,32,100,30],[107,10,101,8],[107,11,101,9],[108,10,103,8],[108,14,103,12],[108,15,103,13,"currentUser"],[108,26,103,24],[108,29,103,27,"user"],[108,33,103,31],[109,10,104,8],[109,17,104,15,"user"],[109,21,104,19],[110,8,105,6],[110,9,105,7],[110,10,105,8],[110,17,105,15,"error"],[110,22,105,20],[110,24,105,22],[111,10,106,8,"console"],[111,17,106,15],[111,18,106,16,"error"],[111,23,106,21],[111,24,106,22],[111,50,106,48],[111,52,106,50,"error"],[111,57,106,55],[111,58,106,56],[112,10,107,8],[112,16,107,14,"error"],[112,21,107,19],[113,8,108,6],[114,6,109,4],[114,7,109,5],[115,6,111,4],[116,0,112,0],[117,0,113,0],[118,0,114,0],[119,6,115,4,"signOut"],[119,13,115,11],[119,15,115,13],[119,21,115,13,"signOut"],[119,22,115,13],[119,27,115,25],[120,8,116,6],[120,12,116,10],[121,10,117,8,"console"],[121,17,117,15],[121,18,117,16,"log"],[121,21,117,19],[121,22,117,20],[121,40,117,38],[121,41,117,39],[122,10,118,8],[122,14,118,12],[122,15,118,13,"currentUser"],[122,26,118,24],[122,29,118,27],[122,33,118,31],[124,10,120,8],[125,10,121,8],[125,14,121,12],[125,15,121,13,"listeners"],[125,24,121,22],[125,25,121,23,"forEach"],[125,32,121,30],[125,33,121,31,"callback"],[125,41,121,39],[125,45,121,43,"callback"],[125,53,121,51],[125,54,121,52],[125,58,121,56],[125,59,121,57],[125,60,121,58],[126,8,122,6],[126,9,122,7],[126,10,122,8],[126,17,122,15,"error"],[126,22,122,20],[126,24,122,22],[127,10,123,8,"console"],[127,17,123,15],[127,18,123,16,"error"],[127,23,123,21],[127,24,123,22],[127,42,123,40],[127,44,123,42,"error"],[127,49,123,47],[127,50,123,48],[128,10,124,8],[128,16,124,14,"error"],[128,21,124,19],[129,8,125,6],[130,6,126,4],[130,7,126,5],[131,6,128,4],[132,0,129,0],[133,0,130,0],[134,0,131,0],[135,6,132,4,"getCurrentUser"],[135,20,132,18],[135,22,132,20,"getCurrentUser"],[135,23,132,20],[135,28,132,26],[136,8,133,6],[136,15,133,13],[136,19,133,17],[136,20,133,18,"currentUser"],[136,31,133,29],[137,6,134,4],[137,7,134,5],[138,6,136,4],[139,0,137,0],[140,0,138,0],[141,0,139,0],[142,0,140,0],[143,6,141,4,"onAuthStateChanged"],[143,24,141,22],[143,26,141,25,"callback"],[143,34,141,33],[143,38,141,38],[144,8,142,6],[144,14,142,12,"listenerId"],[144,24,142,22],[144,27,142,25,"Date"],[144,31,142,29],[144,32,142,30,"now"],[144,35,142,33],[144,36,142,34],[144,37,142,35],[144,38,142,36,"toString"],[144,46,142,44],[144,47,142,45],[144,48,142,46],[145,8,143,6],[145,12,143,10],[145,13,143,11,"listeners"],[145,22,143,20],[145,23,143,21,"set"],[145,26,143,24],[145,27,143,25,"listenerId"],[145,37,143,35],[145,39,143,37,"callback"],[145,47,143,45],[145,48,143,46],[147,8,145,6],[148,8,146,6,"callback"],[148,16,146,14],[148,17,146,15],[148,21,146,19],[148,22,146,20,"currentUser"],[148,33,146,31],[148,34,146,32],[150,8,148,6],[151,8,149,6],[151,15,149,13],[151,21,149,19],[152,10,150,8],[152,14,150,12],[152,15,150,13,"listeners"],[152,24,150,22],[152,25,150,23,"delete"],[152,31,150,29],[152,32,150,30,"listenerId"],[152,42,150,40],[152,43,150,41],[153,8,151,6],[153,9,151,7],[154,6,152,4],[154,7,152,5],[155,6,154,4],[156,0,155,0],[157,0,156,0],[158,0,157,0],[159,0,158,0],[160,6,159,4,"updateProfile"],[160,19,159,17],[160,21,159,19],[160,27,159,26,"updates"],[160,34,159,33],[160,38,159,38],[161,8,160,6],[161,12,160,10],[162,10,161,8],[162,14,161,12],[162,15,161,13],[162,19,161,17],[162,20,161,18,"currentUser"],[162,31,161,29],[162,33,161,31],[163,12,162,10],[163,18,162,16],[163,22,162,20,"Error"],[163,27,162,25],[163,28,162,26],[163,51,162,49],[163,52,162,50],[164,10,163,8],[166,10,165,8],[167,10,166,8],[167,14,166,12],[167,15,166,13,"currentUser"],[167,26,166,24],[167,29,166,27],[168,12,167,10],[168,15,167,13],[168,19,167,17],[168,20,167,18,"currentUser"],[168,31,167,29],[169,12,168,10],[169,15,168,13,"updates"],[169,22,168,20],[170,12,169,10,"updatedAt"],[170,21,169,19],[170,23,169,21],[170,27,169,25,"Date"],[170,31,169,29],[170,32,169,30],[171,10,170,8],[171,11,170,9],[173,10,172,8],[174,10,173,8],[174,14,173,12],[174,15,173,13,"listeners"],[174,24,173,22],[174,25,173,23,"forEach"],[174,32,173,30],[174,33,173,31,"callback"],[174,41,173,39],[174,45,173,43,"callback"],[174,53,173,51],[174,54,173,52],[174,58,173,56],[174,59,173,57,"currentUser"],[174,70,173,68],[174,71,173,69],[174,72,173,70],[175,10,175,8],[175,17,175,15],[175,21,175,19],[175,22,175,20,"currentUser"],[175,33,175,31],[176,8,176,6],[176,9,176,7],[176,10,176,8],[176,17,176,15,"error"],[176,22,176,20],[176,24,176,22],[177,10,177,8,"console"],[177,17,177,15],[177,18,177,16,"error"],[177,23,177,21],[177,24,177,22],[177,48,177,46],[177,50,177,48,"error"],[177,55,177,53],[177,56,177,54],[178,10,178,8],[178,16,178,14,"error"],[178,21,178,19],[179,8,179,6],[180,6,180,4],[181,4,181,2],[181,5,181,3],[183,4,183,2],[184,0,184,0],[185,0,185,0],[186,4,186,2,"firestore"],[186,13,186,11],[186,16,186,14],[187,6,187,4],[188,0,188,0],[189,0,189,0],[190,0,190,0],[191,0,191,0],[192,6,192,4,"collection"],[192,16,192,14],[192,18,192,17,"collectionName"],[192,32,192,31],[192,37,192,37],[193,8,193,6],[194,0,194,0],[195,0,195,0],[196,0,196,0],[197,0,197,0],[198,8,198,6,"add"],[198,11,198,9],[198,13,198,11],[198,19,198,18,"data"],[198,23,198,22],[198,27,198,27],[199,10,199,8],[199,16,199,14,"docId"],[199,21,199,19],[199,24,199,22],[199,27,199,25,"collectionName"],[199,41,199,39],[199,45,199,43,"Date"],[199,49,199,47],[199,50,199,48,"now"],[199,53,199,51],[199,54,199,52],[199,55,199,53],[199,57,199,55],[200,10,200,8,"console"],[200,17,200,15],[200,18,200,16,"log"],[200,21,200,19],[200,22,200,20],[200,44,200,42,"collectionName"],[200,58,200,56],[200,61,200,59],[200,63,200,61,"data"],[200,67,200,65],[200,68,200,66],[201,10,202,8],[201,17,202,15],[202,12,203,10,"id"],[202,14,203,12],[202,16,203,14,"docId"],[202,21,203,19],[203,12,204,10],[203,15,204,13,"data"],[203,19,204,17],[204,12,205,10,"createdAt"],[204,21,205,19],[204,23,205,21],[204,27,205,25,"Date"],[204,31,205,29],[204,32,205,30],[204,33,205,31],[205,12,206,10,"updatedAt"],[205,21,206,19],[205,23,206,21],[205,27,206,25,"Date"],[205,31,206,29],[205,32,206,30],[206,10,207,8],[206,11,207,9],[207,8,208,6],[207,9,208,7],[208,8,210,6],[209,0,211,0],[210,0,212,0],[211,0,213,0],[212,0,214,0],[213,8,215,6,"doc"],[213,11,215,9],[213,13,215,12,"docId"],[213,18,215,17],[213,23,215,23],[214,10,216,8,"get"],[214,13,216,11],[214,15,216,13],[214,21,216,13,"get"],[214,22,216,13],[214,27,216,25],[215,12,217,10,"console"],[215,19,217,17],[215,20,217,18,"log"],[215,23,217,21],[215,24,217,22],[215,44,217,42,"docId"],[215,49,217,47],[215,58,217,56,"collectionName"],[215,72,217,70],[215,74,217,72],[215,75,217,73],[216,12,218,10],[216,19,218,17],[217,14,219,12,"id"],[217,16,219,14],[217,18,219,16,"docId"],[217,23,219,21],[218,14,220,12,"exists"],[218,20,220,18],[218,22,220,20],[218,26,220,24],[219,14,221,12,"data"],[219,18,221,16],[219,20,221,18,"data"],[219,21,221,18],[219,27,221,25],[220,16,222,14,"id"],[220,18,222,16],[220,20,222,18,"docId"],[220,25,222,23],[221,16,223,14,"createdAt"],[221,25,223,23],[221,27,223,25],[221,31,223,29,"Date"],[221,35,223,33],[221,36,223,34],[221,37,223,35],[222,16,224,14,"updatedAt"],[222,25,224,23],[222,27,224,25],[222,31,224,29,"Date"],[222,35,224,33],[222,36,224,34],[223,14,225,12],[223,15,225,13],[224,12,226,10],[224,13,226,11],[225,10,227,8],[225,11,227,9],[226,10,229,8,"set"],[226,13,229,11],[226,15,229,13],[226,21,229,20,"data"],[226,25,229,24],[226,29,229,29],[227,12,230,10,"console"],[227,19,230,17],[227,20,230,18,"log"],[227,23,230,21],[227,24,230,22],[227,44,230,42,"docId"],[227,49,230,47],[227,56,230,54,"collectionName"],[227,70,230,68],[227,73,230,71],[227,75,230,73,"data"],[227,79,230,77],[227,80,230,78],[228,12,231,10],[228,19,231,17],[229,14,232,12,"id"],[229,16,232,14],[229,18,232,16,"docId"],[229,23,232,21],[230,14,233,12],[230,17,233,15,"data"],[230,21,233,19],[231,14,234,12,"updatedAt"],[231,23,234,21],[231,25,234,23],[231,29,234,27,"Date"],[231,33,234,31],[231,34,234,32],[232,12,235,10],[232,13,235,11],[233,10,236,8],[233,11,236,9],[234,10,238,8,"update"],[234,16,238,14],[234,18,238,16],[234,24,238,23,"updates"],[234,31,238,30],[234,35,238,35],[235,12,239,10,"console"],[235,19,239,17],[235,20,239,18,"log"],[235,23,239,21],[235,24,239,22],[235,45,239,43,"docId"],[235,50,239,48],[235,57,239,55,"collectionName"],[235,71,239,69],[235,74,239,72],[235,76,239,74,"updates"],[235,83,239,81],[235,84,239,82],[236,12,240,10],[236,19,240,17],[237,14,241,12,"id"],[237,16,241,14],[237,18,241,16,"docId"],[237,23,241,21],[238,14,242,12],[238,17,242,15,"updates"],[238,24,242,22],[239,14,243,12,"updatedAt"],[239,23,243,21],[239,25,243,23],[239,29,243,27,"Date"],[239,33,243,31],[239,34,243,32],[240,12,244,10],[240,13,244,11],[241,10,245,8],[242,8,246,6],[242,9,246,7],[242,10,246,8],[243,8,248,6],[244,0,249,0],[245,0,250,0],[246,0,251,0],[247,0,252,0],[248,0,253,0],[249,0,254,0],[250,8,255,6,"where"],[250,13,255,11],[250,15,255,13,"where"],[250,16,255,14,"field"],[250,21,255,19],[250,23,255,21,"operator"],[250,31,255,29],[250,33,255,31,"value"],[250,38,255,36],[250,44,255,42],[251,10,256,8,"get"],[251,13,256,11],[251,15,256,13],[251,21,256,13,"get"],[251,22,256,13],[251,27,256,25],[252,12,257,10,"console"],[252,19,257,17],[252,20,257,18,"log"],[252,23,257,21],[252,24,257,22],[252,36,257,34,"collectionName"],[252,50,257,48],[252,60,257,58,"field"],[252,65,257,63],[252,69,257,67,"operator"],[252,77,257,75],[252,81,257,79,"value"],[252,86,257,84],[252,88,257,86],[252,89,257,87],[253,12,258,10],[253,19,258,17],[254,14,259,12,"docs"],[254,18,259,16],[254,20,259,18],[254,22,259,20],[255,14,260,12,"empty"],[255,19,260,17],[255,21,260,19],[255,25,260,23],[256,14,261,12,"size"],[256,18,261,16],[256,20,261,18],[257,12,262,10],[257,13,262,11],[258,10,263,8],[259,8,264,6],[259,9,264,7],[260,6,265,4],[260,7,265,5],[261,4,266,2],[261,5,266,3],[263,4,268,2],[264,0,269,0],[265,0,270,0],[266,4,271,2,"database"],[266,12,271,10],[266,15,271,13],[267,6,272,4],[268,0,273,0],[269,0,274,0],[270,0,275,0],[271,0,276,0],[272,6,277,4,"ref"],[272,9,277,7],[272,11,277,10,"path"],[272,15,277,14],[272,20,277,20],[273,8,278,6],[274,0,279,0],[275,0,280,0],[276,0,281,0],[277,0,282,0],[278,8,283,6,"set"],[278,11,283,9],[278,13,283,11],[278,19,283,18,"data"],[278,23,283,22],[278,27,283,27],[279,10,284,8,"console"],[279,17,284,15],[279,18,284,16,"log"],[279,21,284,19],[279,22,284,20],[279,41,284,39,"path"],[279,45,284,43],[279,48,284,46],[279,50,284,48,"data"],[279,54,284,52],[279,55,284,53],[280,10,285,8],[280,17,285,15,"Promise"],[280,24,285,22],[280,25,285,23,"resolve"],[280,32,285,30],[280,33,285,31],[280,34,285,32],[281,8,286,6],[281,9,286,7],[282,8,288,6],[283,0,289,0],[284,0,290,0],[285,0,291,0],[286,0,292,0],[287,8,293,6,"update"],[287,14,293,12],[287,16,293,14],[287,22,293,21,"updates"],[287,29,293,28],[287,33,293,33],[288,10,294,8,"console"],[288,17,294,15],[288,18,294,16,"log"],[288,21,294,19],[288,22,294,20],[288,42,294,40,"path"],[288,46,294,44],[288,49,294,47],[288,51,294,49,"updates"],[288,58,294,56],[288,59,294,57],[289,10,295,8],[289,17,295,15,"Promise"],[289,24,295,22],[289,25,295,23,"resolve"],[289,32,295,30],[289,33,295,31],[289,34,295,32],[290,8,296,6],[290,9,296,7],[291,8,298,6],[292,0,299,0],[293,0,300,0],[294,0,301,0],[295,0,302,0],[296,8,303,6,"on"],[296,10,303,8],[296,12,303,10,"on"],[296,13,303,11,"eventType"],[296,22,303,20],[296,24,303,22,"callback"],[296,32,303,30],[296,37,303,35],[297,10,304,8,"console"],[297,17,304,15],[297,18,304,16,"log"],[297,21,304,19],[297,22,304,20],[297,39,304,37,"eventType"],[297,48,304,46],[297,55,304,53,"path"],[297,59,304,57],[297,61,304,59],[297,62,304,60],[299,10,306,8],[300,10,307,8],[300,14,307,12,"path"],[300,18,307,16],[300,19,307,17,"includes"],[300,27,307,25],[300,28,307,26],[300,37,307,35],[300,38,307,36],[300,40,307,38],[301,12,308,10],[302,12,309,10],[302,18,309,16,"interval"],[302,26,309,24],[302,29,309,27,"setInterval"],[302,40,309,38],[302,41,309,39],[302,47,309,45],[303,14,310,12,"callback"],[303,22,310,20],[303,23,310,21],[304,16,311,14,"val"],[304,19,311,17],[304,21,311,19,"val"],[304,22,311,19],[304,28,311,26],[305,18,312,16,"latitude"],[305,26,312,24],[305,28,312,26],[305,35,312,33],[305,38,312,36],[305,39,312,37,"Math"],[305,43,312,41],[305,44,312,42,"random"],[305,50,312,48],[305,51,312,49],[305,52,312,50],[305,55,312,53],[305,58,312,56],[305,62,312,60],[305,66,312,64],[306,18,313,16,"longitude"],[306,27,313,25],[306,29,313,27],[306,36,313,34],[306,39,313,37],[306,40,313,38,"Math"],[306,44,313,42],[306,45,313,43,"random"],[306,51,313,49],[306,52,313,50],[306,53,313,51],[306,56,313,54],[306,59,313,57],[306,63,313,61],[306,67,313,65],[307,18,314,16,"timestamp"],[307,27,314,25],[307,29,314,27,"Date"],[307,33,314,31],[307,34,314,32,"now"],[307,37,314,35],[307,38,314,36],[308,16,315,14],[308,17,315,15],[309,14,316,12],[309,15,316,13],[309,16,316,14],[310,12,317,10],[310,13,317,11],[310,15,317,13],[310,19,317,17],[310,20,317,18],[311,12,319,10],[311,19,319,17],[311,25,319,23,"clearInterval"],[311,38,319,36],[311,39,319,37,"interval"],[311,47,319,45],[311,48,319,46],[312,10,320,8],[314,10,322,8],[315,10,323,8],[315,17,323,15],[315,23,323,21,"console"],[315,30,323,28],[315,31,323,29,"log"],[315,34,323,32],[315,35,323,33],[315,56,323,54,"path"],[315,60,323,58],[315,62,323,60],[315,63,323,61],[316,8,324,6],[316,9,324,7],[317,8,326,6],[318,0,327,0],[319,0,328,0],[320,0,329,0],[321,0,330,0],[322,8,331,6,"off"],[322,11,331,9],[322,13,331,11,"off"],[322,14,331,12,"eventType"],[322,23,331,21],[322,25,331,23,"callback"],[322,33,331,31],[322,38,331,36],[323,10,332,8,"console"],[323,17,332,15],[323,18,332,16,"log"],[323,21,332,19],[323,22,332,20],[323,47,332,45,"eventType"],[323,56,332,54],[323,63,332,61,"path"],[323,67,332,65],[323,69,332,67],[323,70,332,68],[324,8,333,6],[325,6,334,4],[325,7,334,5],[326,4,335,2],[326,5,335,3],[328,4,337,2],[329,0,338,0],[330,0,339,0],[331,4,340,2,"analytics"],[331,13,340,11],[331,16,340,14],[332,6,341,4],[333,0,342,0],[334,0,343,0],[335,0,344,0],[336,0,345,0],[337,6,346,4,"logEvent"],[337,14,346,12],[337,16,346,14],[337,22,346,14,"logEvent"],[337,23,346,21,"eventName"],[337,32,346,30],[337,34,346,32,"parameters"],[337,44,346,42],[337,47,346,45],[337,48,346,46],[337,49,346,47],[337,54,346,52],[338,8,347,6,"console"],[338,15,347,13],[338,16,347,14,"log"],[338,19,347,17],[338,20,347,18],[338,41,347,39,"eventName"],[338,50,347,48],[338,53,347,51],[338,55,347,53,"parameters"],[338,65,347,63],[338,66,347,64],[340,8,349,6],[341,8,350,6],[341,15,350,13,"Promise"],[341,22,350,20],[341,23,350,21,"resolve"],[341,30,350,28],[341,31,350,29],[341,32,350,30],[342,6,351,4],[342,7,351,5],[343,6,353,4],[344,0,354,0],[345,0,355,0],[346,0,356,0],[347,6,357,4,"setUserProperties"],[347,23,357,21],[347,25,357,23],[347,31,357,30,"properties"],[347,41,357,40],[347,45,357,45],[348,8,358,6,"console"],[348,15,358,13],[348,16,358,14,"log"],[348,19,358,17],[348,20,358,18],[348,46,358,44],[348,48,358,46,"properties"],[348,58,358,56],[348,59,358,57],[349,8,359,6],[349,15,359,13,"Promise"],[349,22,359,20],[349,23,359,21,"resolve"],[349,30,359,28],[349,31,359,29],[349,32,359,30],[350,6,360,4],[350,7,360,5],[351,6,362,4],[352,0,363,0],[353,0,364,0],[354,0,365,0],[355,6,366,4,"setCurrentScreen"],[355,22,366,20],[355,24,366,22],[355,30,366,29,"screenName"],[355,40,366,39],[355,44,366,44],[356,8,367,6,"console"],[356,15,367,13],[356,16,367,14,"log"],[356,19,367,17],[356,20,367,18],[356,39,367,37,"screenName"],[356,49,367,47],[356,51,367,49],[356,52,367,50],[357,8,368,6],[357,15,368,13,"Promise"],[357,22,368,20],[357,23,368,21,"resolve"],[357,30,368,28],[357,31,368,29],[357,32,368,30],[358,6,369,4],[359,4,370,2],[359,5,370,3],[360,2,371,0],[362,2,373,0],[363,2,374,7],[363,8,374,13,"firebase"],[363,16,374,21],[363,19,374,21,"exports"],[363,26,374,21],[363,27,374,21,"firebase"],[363,35,374,21],[363,38,374,24],[363,42,374,28,"FirebaseService"],[363,57,374,43],[363,58,374,44],[363,59,374,45],[365,2,376,0],[366,2,377,0,"firebase"],[366,10,377,8],[366,11,377,9,"initialize"],[366,21,377,19],[366,22,377,20],[366,23,377,21],[366,24,377,22,"catch"],[366,29,377,27],[366,30,377,28,"console"],[366,37,377,35],[366,38,377,36,"error"],[366,43,377,41],[366,44,377,42],[367,2,377,43],[367,6,377,43,"_default"],[367,14,377,43],[367,17,377,43,"exports"],[367,24,377,43],[367,25,377,43,"default"],[367,32,377,43],[367,35,379,15,"firebase"],[367,43,379,23],[368,0,379,23],[368,3]],"functionMap":{"names":["<global>","FirebaseService","FirebaseService#constructor","FirebaseService#initialize","FirebaseService#auth.sendOTP","Promise$argument_0","FirebaseService#auth.verifyOTP","FirebaseService#auth.signOut","listeners.forEach$argument_0","FirebaseService#auth.getCurrentUser","FirebaseService#auth.onAuthStateChanged","<anonymous>","FirebaseService#auth.updateProfile","FirebaseService#firestore.collection","add","doc","get","data","set","update","where","FirebaseService#database.ref","on","setInterval$argument_0","callback$argument_0.val","off","FirebaseService#analytics.logEvent","FirebaseService#analytics.setUserProperties","FirebaseService#analytics.setCurrentScreen"],"mappings":"AAA;ACwB;ECC;GDI;EEK;GFU;aGW;0BCM,oCD;KHQ;eKQ;0BDK,oCC;KL0B;aMM;+BCM,0BD;KNK;oBQM;KRE;wBSO;aCQ;ODE;KTC;mBWO;+BJc,sCI;KXO;gBYY;WCM;ODU;WEO;aCC;kBCK;cDI;SDE;aGE;SHO;gBIE;SJO;QFC;aOS;aJC;SIO;QPC;MZC;SoBY;WHM;OGG;cFO;OEG;UCO;uCCM;mBCE;gBDI;WDE;iBXE,6BW;eXI,8CW;ODC;WIO;OJE;MpBC;cyBY;KzBK;uB0BM;K1BG;sB2BM;K3BG;CDE"}},"type":"js/module"}]}